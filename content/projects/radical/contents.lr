_model: page
---
title: Radical
---
subtitle: Revolutionize how you create React/Redux applications
---
title_image_url: /static/img/radical-logo.png
---
body:

<div class="text-center"><a class="btn btn-primary" href="https://github.com/nathan-rice/radical">Radical @ github</a> <a class="btn btn-primary" href="">Full documentation</a></div>

We can all agree the React/Redux combination is great for creating predictable, performant web applications.  Unfortunately, it comes with some downsides in terms of how applications are organized and constructed.

For starters, there is a lot of boilerplate.  Between having separate dispatch and reduction functions and having to define actions and action creators, new features can be tedious to add.

Additionally, Redux applications typically involve passing around coarse grained portions of application state.  This leads to reducers and state retrieval functions that have to traverse the state tree.  Writing these functions involves more work, and they make your code brittle.  Redux does provide you with the tools to do the right thing, but they’re not as intuitive or automatic as they could be.

Finally, it is too common in Redux applications for actions, state retrieval functions and reducers to be defined in completely different places.  Defining these things in separately means having to jump around in the code to follow the logic.  Packaging them together makes the code easier to read and understand.  Additionally, by grouping them, it becomes easy to organize your code into reusable modules.

## Enter Radical
*Imagine* if you didn’t have to write boilerplate in 95% of cases, and the other 5% of cases were easy to handle.  *Imagine* if giving reducers ultra-fine-grained state was easy and automatic. *Imagine* if packaging code into composable modular application features was the default. **Radical provides all of this**; it also has full Immutable support, and a clean, declarative AJAX interface.  Radical is written in Typescript, and committed to great documentation.

## How does Radical work?

Radical applications are built around the concept of a cohesive internal API.  Radical provides two types of objects for you to build your API from: *Actions*, and *Namespaces*.

### Actions
*Actions* are like a little bundle comprising everything needed to change the application state.  They are typically comprised of an *initiator*, and a *reducer*.  *Initiators* should be used for application logic; *reducers* should only be responsible for changing state.

Radical provides sensible default behavior for both *initiators* and *reducers*. The default *initiator* will apply the attributes of an object argument to the Redux action created\*.  The default reducer applies attribute values from the Redux action to the local state\*.  A reasonable name is generated for the Redux action type, or you can specify it manually. <sup>(* type exluded)</sup>

### Namespaces
*Namespaces* are containers for *Actions*, as well as other *Namespaces*.  You can use *Namespaces* to model the logical organization of your application.  By default a state tree is automatically generated that matches the *Namespace* tree structure.  Additionally, *Actions* defined on a *Namespace* automatically receive its portion of the state tree for reduction.

Because *Namespaces* are designed around the idea of composition and decoupling, it is easy to re-organize or modularize a Radical application.  *Actions* will work regardless of where their parent Namespace resides.

## How about an example?

I [rewrote](https://github.com/nathan-rice/radical-examples) some of the [examples from the Redux github](https://github.com/reactjs/redux/tree/master/examples) in a Radical style.  I’m going to discuss one of them - [a web store](https://github.com/nathan-rice/radical-examples/tree/master/shopping-cart) - here.  I encourage you to have a look at the the [Redux counterpoint](https://github.com/reactjs/redux/tree/master/examples/shopping-cart) and and decide for yourself which one is clearer and more maintainable.

### Simple Web Store

This is the simplest possible web store.  It has an inventory of products for sale, and provides a shopping cart to hold purchases before checkout.

The shopping cart and the inventory are both containers for products that share similar functionality, so we’re going to derive them both from a base class.  In addition, the shopping cart needs to be able to display the total dollar amount of the goods contained in it, and it is probably a good location for checkout functionality.

Let’s take a look at how this could be be structured in Radical:

#### api.ts
```typescript
import * as Radical from 'radical';
import * as Redux from 'redux';

export class Product {

   private static nextId = 0;
   static getId() {
       return this.nextId++;
   }

   constructor(public title: string, public price: number, public id: number = -1) {
       if (id < 0) this.id = Product.getId();
   }
}

/* This will represent the state object for both StoreContainer's defaultState, and for
* any reducers attached to StoreContainer
*/
interface StoreContainerState {
   products: {[key: number]: Product};
   quantities: {[key: number]: number};
}

/* Since our StoreContainers (the shopping cart and inventory) will group and provide state
* for a set of related Actions, they will be Namespaces.
*/
class StoreContainer extends Radical.Namespace {
  
   // An empty object is assumed as the default if none is specified
   defaultState: StoreContainerState = {products:{}, quantities: {}};

   // A convenience method wrapper around setQuantity
   add(product: Product, quantity: number = 1) {
       let startingQuantity = this.getQuantity(product);
       // here we're calling the initiator function of the setQuantity Action
       return this.setQuantity(product, startingQuantity + quantity);
   }

   // Another convenience method wrapper around setQuantity
   remove(product: Product, quantity: number = 1) {
       let startingQuantity = this.getQuantity(product);
       if (startingQuantity >= quantity) {
           // here we're calling the initiator function of the setQuantity Action
           this.setQuantity(product, startingQuantity - quantity);
           return true;
       } else return false;
   }
  
   // get all the products in the container with a quantity of 1 or more
   list() {
       // the Namespace's getState method gets local state automatically
       let state = this.getState(), quantities = state.quantities, products = [];
       for (let key in quantities) {
           if (quantities.hasOwnProperty(key) && quantities[key] > 0) {
               products.push(state.products[key]);
           }
       }
       return products;
   }

   /* Here we're creating an Action for the first time.  Note that the create method is
    * preferable to using new in most cases.
    */
   setQuantity = Radical.Action.create({
       /* This initiator doesn't do much, it could almost be replaced by the default
        * initiator.  Note that the first argument to the initiator is the action itself.
        * That argument is automatically bound to the current action, while this is
        * bound to the parent Namespace.
        */
       initiator: function(action, product: Product, quantity: number) {
           return action.dispatch({product, quantity});
       },
       /* Notice this reducer only has to deal with a StoreContainerState object, and
        * you can safely modify state directly, as it is a copy of the original.
        */
       reducer: function (state: StoreContainerState, action) {
           let {product, quantity} = action;
           if (!state.products[product.id]) {
               state.products = Object.assign({[product.id]: product}, state.products);
           }
           state.quantities = Object.assign({}, state.quantities);
           state.quantities[product.id] = quantity;
           return state;
       }
   });

   getQuantity(product: Product): number {
       return this.getState().quantities[product.id] || 0;
   }
}

class ShoppingCart extends StoreContainer {
   // Since we don't need to pass anything here, the default initiator will be fine
   checkout = Radical.Action.create({
       reducer: function (state: StoreContainerState) {
           state.products = {};
           state.quantities = {};
           return state;
       }
   });
  
   getTotal() {
       let {quantities, products} = this.getState(), total = 0;
       for (let key in quantities) {
           if (quantities.hasOwnProperty(key)) total += quantities[key] * products[key].price
       }
       return total.toFixed(2);
   };
}

/* The inventory and shopping cart functionality has been defined, now there needs to
* be something to tie everything together into a cohesive application.  Store will
* serve to provide the top level interface.
*/
class Store extends Radical.Namespace {
   inventory = StoreContainer.create({name: "Inventory"}) as StoreContainer;
   shoppingCart = ShoppingCart.create() as ShoppingCart;
  
   // Move an item from inventory to the shopping cart
   order(product: Product, quantity: number = 1) {
       if (this.inventory.remove(product, quantity)) {
           this.shoppingCart.add(product, quantity);
           return true;
       } else return false;
   }
  
   // Move an item from the shopping cart to inventory
   cancelOrder(product: Product, quantity: number = 1) {
       if (this.shoppingCart.remove(product, quantity)) {
           this.inventory.add(product, quantity);
           return true;
       } else return false;
   }
}

var w = (window as any),
   devToolExtension = w.devToolsExtension ? w.devToolsExtension() : undefined;

export const store = Redux.createStore(state => state, null, devToolExtension);

// Once you have your Redux store, create a web Store and wire it in
export const webStore = Store.create({store: store}) as Store;

/* You can just use the top level Store's reduce function, it will dispatch
* relevant portions of the state tree to its children and their Actions.
*
* Don't do this until you have completely configured your top-level Namespace.
*/
store.replaceReducer(webStore.reduce);

// Now to give the people something to buy!
webStore.inventory
   .add(new Product("Tablet", 500), 1)
   .add(new Product("Shirt", 20), 5)
   .add(new Product("Album", 15), 10);
```

That is very straightforward, easy to follow code.  Now, to consume it from React:

#### components.tsx
```typescript
import * as api from './api';
import * as React from 'react';
import {connect} from 'react-redux';

export const App = ({}) => {
   return (
       <div>
           <h2>Shopping Cart Example</h2>
           <hr/>
           <Products title="Products"/>
           <hr/>
           <Cart />
       </div>
   )
};

interface IProductsProps {
   title: string;
   products?: api.Product[];
}

/* Note here that I'm wiring the Products component directly to the API via React/Redux.
* I find this both conceptually clearer and more convenient.
*/
function productsLink() {
   return {products: api.webStore.inventory.list()}
}

// A small workaround for broken React/Redux typings.
const productsLinkConnect = (productsClass: any): any => connect(productsLink)(productsClass);

@productsLinkConnect
class Products extends React.Component<IProductsProps, any> {
   render() {
       return (
           <div>
               <h3>{this.props.title}</h3>
               <div>
                   {this.props.products.map(product =>
                   <ProductItem key={product.id} product={product}/>
                       )}
               </div>
           </div>
       )
   }
}

interface ICartProps {
   products?: api.Product[];
}

// Using the same React/Redux pattern
function cartLink() {
   return {products: api.webStore.shoppingCart.list()}
}

// That workaround again
const cartLinkConnect = (cartClass: any): any => connect(cartLink)(cartClass);

@cartLinkConnect
export class Cart extends React.Component<ICartProps, any> {
  
   getProductNodes() {
       const products = this.props.products;
       return !products.length ?
           <em>Please add some products to cart.</em> :
           products.map(product => <CartItem key={product.id} product={product} />);
   }
  
   /* Here we utilize the api directly.  Another option is to pass around the shoppingCart
    * Namespace as a prop; that shifts coupling from the component itself to its parents.
    */
   render() {
       return (
           <div>
               <h3>Your Cart</h3>
               <div>{this.getProductNodes()}</div>
               <p>Total: ${api.webStore.shoppingCart.getTotal()}</p>
               <button onClick={api.webStore.shoppingCart.checkout}
                       disabled={this.props.products.length ? '' : 'disabled'}>
                   Checkout
               </button>
           </div>
       )
   }
}

export class CartItem extends React.Component<IProductItemProps, any> {
   render() {
       const {product} = this.props;

       return (
           <div
               style={{ marginBottom: 20 }}>
               <Product
                   title={product.title}
                   price={product.price}
                   quantity={api.webStore.shoppingCart.getQuantity(product)}
                   key={product.id}/>
               <button onClick={() => api.webStore.cancelOrder(product)}>Remove</button>
           </div>
       )
   }
}

interface IProductProps {
   price: number;
   quantity?: number;
   title: string;
}

export class Product extends React.Component<IProductProps, any> {
   render() {
       const {price, quantity, title} = this.props;
       return <span> {title} - ${price} {quantity ? `x ${quantity}` : null} </span>
   }
}

interface IProductItemProps {
   product: api.Product;
}

export class ProductItem extends React.Component<IProductItemProps, any> {
   render() {
       const {product} = this.props;

       return (
           <div
               style={{ marginBottom: 20 }}>
               <Product
                   title={product.title}
                   price={product.price}/>
               <button onClick={() => api.webStore.order(product)}>Add to cart</button>
           </div>
       )
   }
}
```

Pretty straightforward!

<div class="text-center"><a class="btn btn-primary" href="https://github.com/nathan-rice/radical">Radical @ github</a> <a class="btn btn-primary" href="">Full documentation</a></div>


